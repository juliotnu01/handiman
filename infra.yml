AWSTemplateFormatVersion: "2010-09-09"

# Definición de parámetros
Parameters:
  DBPassword:
    Type: String
    NoEcho: true
    Description: "Contraseña para la base de datos MySQL"
    Default: "secretpassword"  # Valor predeterminado
  UbuntuAMI:
    Type: String
    Description: "ID de la AMI de Ubuntu 24.04 LTS (ARM)"
    Default: "ami-0ac5d9e789dbb455a"  # Puedes cambiar este valor según la región

# Recursos de la plantilla
Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso HTTP/SSH a EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
    DeletionPolicy: Delete

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso RDS desde EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
    DeletionPolicy: Delete

  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - EC2SecurityGroup
    Properties:
      ImageId: !Ref UbuntuAMI  # Referencia al parámetro
      InstanceType: t4g.small
      KeyName: KeypairGithub
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl enable docker
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          # Instalar AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
    DeletionPolicy: Delete

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecurityGroup
    Properties:
      DBInstanceIdentifier: laravel-db
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBName: laravel
      Engine: mysql
      EngineVersion: "8.0"  # Versión compatible con la capa gratuita
      DBInstanceClass: db.t4g.micro  # Clase de instancia compatible con la capa gratuita
      AllocatedStorage: 20  # Máximo de 20 GB para la capa gratuita
      PubliclyAccessible: true  # Mejor práctica: desactiva el acceso público
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
    DeletionPolicy: Snapshot

# Salidas de la plantilla
Outputs:
  MyEC2InstancePublicIP:
    Description: "Dirección IP pública de la instancia EC2"
    Value: !GetAtt MyEC2Instance.PublicIp
  RDSEndpoint:
    Description: "Endpoint de la instancia RDS"
    Value: !GetAtt MyRDSInstance.Endpoint.Address