AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MyECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: handiman-app

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c55b6a9cb98559c5 # Amazon Linux 2 AMI (HVM), SSD Volume Type, us-east-2
      InstanceType: t2.micro
      KeyName: KeypairGithub # Ya debe existir
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          amazon-linux-extras install docker -y
          service docker start
          usermod -aG docker ec2-user
          chkconfig docker on
          # Opcional: Instalar docker-compose
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: laravel-db
      MasterUsername: admin
      MasterUserPassword: "{{resolve:ssm-secure:/laravel/db/password}}" # Usar ssm-secure
      DBName: laravel
      Engine: mysql
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso HTTP/SSH a EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso RDS desde EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:CreateRepository
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                Resource: "*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "arn:aws:s3:::your-bucket-name/*"
        - PolicyName: SSMReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "arn:aws:ssm:us-east-2:545009837147:parameter/laravel/db/password"

Outputs:
  EC2PublicIP:
    Description: IP p√∫blica de EC2
    Value: !GetAtt MyEC2Instance.PublicIp
  RDSEndpoint:
    Description: Endpoint de RDS
    Value: !GetAtt MyRDSInstance.Endpoint.Address
