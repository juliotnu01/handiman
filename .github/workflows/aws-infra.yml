name: AWS CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 4. Obtener IP de EC2 y Endpoint de RDS
      - name: Obtener metadatos de CloudFormation
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 5. Construir y subir imagen a ECR
      - name: Build and Push Docker Image
        run: |
          # Autenticarse en ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

          # Construir y etiquetar la imagen Docker
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t ${{ secrets.ECR_REGISTRY }}:$IMAGE_TAG -f Dockerfile .

          # Subir la imagen a ECR
          docker push ${{ secrets.ECR_REGISTRY }}:$IMAGE_TAG

          # Guardar el tag de la imagen como variable de entorno
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 6. Desplegar en EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Actualizar el sistema
            sudo yum update -y

            # Instalar Docker
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -aG docker ec2-user

            # Verificar que Docker esté instalado
            which docker || echo "Docker is not installed"
            docker --version || echo "Docker command not found"

            # Instalar AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Instalar la biblioteca libcrypt
            sudo yum install -y libxcrypt-compat

            # Instalar Python 3.7
            sudo yum install -y python3.7
            sudo ln -s /usr/bin/python3.7 /usr/bin/python3

            # Reiniciar sesión para aplicar cambios del grupo docker
            echo "Please reconnect to the instance to apply group changes"

            # Exportar variables de entorno
            export RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
            export DB_PASSWORD=$(aws ssm get-parameter --name /laravel/db/password --with-decryption --query Parameter.Value --output text)
            export APP_KEY=$(aws ssm get-parameter --name /laravel/app/key --query Parameter.Value --output text)

            # Descargar y ejecutar la imagen Docker
            docker pull ${{ secrets.ECR_REGISTRY }}/laravel-app:${{ env.IMAGE_TAG }}
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
