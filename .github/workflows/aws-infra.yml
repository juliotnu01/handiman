name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del cÃ³digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Verificar credenciales de AWS
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      # 4. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5. Obtener IP de EC2 y Endpoint de RDS
      - name: Get EC2 Public IP and RDS Endpoint
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 6. Autenticar en ECR y subir imagen
      # - name: Build and Push Docker Image
      #   run: |
      #     aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      #     IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
      #     docker build -t ${{ secrets.ECR_REGISTRY }}:lastest -f Dockerfile .
      #     docker push ${{ secrets.ECR_REGISTRY }}:lastest
      #     echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 7. Desplegar en EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # sudo dnf update -y
            # sudo dnf install docker -y
            # sudo systemctl start docker
            # sudo systemctl enable docker
            # sudo usermod -aG docker ec2-user

            # Instalar bibliotecas necesarias
            # sudo dnf install -y libxcrypt-compat

            # Descargar docker-compose.yml desde GitHub
            curl -LJO https://raw.githubusercontent.com/juliotnu01/handiman/main/docker-compose.yml

            # Verificar contenido del archivo
            cat docker-compose.yml

            # Validar sintaxis del archivo YAML
            docker-compose -f docker-compose.yml config

            # Exportar variables de entorno
            export RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
            export DB_PASSWORD=$(aws ssm get-parameter --name /laravel/db/password --with-decryption --query Parameter.Value --output text)
            export APP_KEY=$(aws ssm get-parameter --name /laravel/app/key --query Parameter.Value --output text)

            # Descargar y ejecutar la imagen Docker
            docker pull ${{ secrets.ECR_REGISTRY }}:lastest
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d

            # Reiniciar la instancia para aplicar cambios
            sudo reboot
