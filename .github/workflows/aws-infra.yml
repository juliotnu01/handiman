name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Verificar credenciales de AWS
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      # 4. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5. Obtener IP de EC2 y Endpoint de RDS
      - name: Get EC2 Public IP and RDS Endpoint
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 6. Generar token de autenticación para ECR
      - name: Generate ECR login token
        id: ecr_login
        run: |
          LOGIN_TOKEN=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
          echo "LOGIN_TOKEN=$LOGIN_TOKEN" >> $GITHUB_ENV

      # 7. Copiar docker-compose-prod.yml a la instancia EC2
      - name: Copy docker-compose-prod.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose-prod.yml"
          target: "/home/ubuntu/"

      # 8. Desplegar contenedores en la instancia EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Autenticar Docker en ECR usando el token generado
            echo "${{ env.LOGIN_TOKEN }}" | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            # Descargar imágenes y ejecutar contenedores
            docker pull ${{ secrets.ECR_REGISTRY }}:latest
            docker-compose -f /home/ubuntu/docker-compose-prod.yml up -d