name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Verificar credenciales de AWS
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      # 4. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5. Obtener IP de EC2 y Endpoint de RDS
      - name: Get EC2 Public IP and RDS Endpoint
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 6. Autenticar en ECR y subir imagen
      - name: Build and Push Docker Image
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t ${{ secrets.ECR_REGISTRY }}:lastest -f Dockerfile .
          docker push ${{ secrets.ECR_REGISTRY }}:lastest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 7. Desplegar en EC2 via SSH
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml,Dockerfile,docker/apache,composer.json,artisan"
          target: "/home/ec2-user/"

      # 8. Desplegar en EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e

            # Limpiar espacio antes del despliegue
            echo "Limpiando espacio en disco..."
            docker system prune -a --volumes -f  # Elimina todo lo no usado [[8]]
            sudo rm -rf /var/lib/docker/tmp/*    # Borra cachés temporales

            # 1. Instalar Apache (httpd) en Amazon Linux 2023
            echo "Instalando Apache..."
            sudo dnf install httpd -y  # [[2]][[6]]

            # 2. Crear directorios automáticamente (Apache los crea, pero verificamos)
            echo "Verificando directorios..."
            sudo mkdir -p /var/www/html  # Solo por seguridad [[8]]
            sudo chown -R ec2-user:ec2-user /var/www/html  # Permisos para el usuario [[8]]

            # 3. Iniciar Apache y habilitarlo en el arranque
            echo "Iniciando Apache..."
            sudo systemctl enable httpd
            sudo systemctl restart httpd

            # 4. Verificar estado de Apache
            echo "Estado de Apache:"
            sudo systemctl status httpd --no-pager

            # 5. Continuar con Docker (si es necesario)
            echo "Desplegando contenedores..."
            docker pull 545009837147.dkr.ecr.us-east-2.amazonaws.com/laravel-app:lastest
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
