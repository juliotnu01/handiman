name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Verificar credenciales de AWS
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      # 4. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5. Obtener IP de EC2 y Endpoint de RDS
      - name: Get EC2 Public IP and RDS Endpoint
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 6. Generar token de autenticación para ECR
      - name: Generate ECR login token
        id: ecr_login
        run: |
          LOGIN_TOKEN=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
          echo "LOGIN_TOKEN=$LOGIN_TOKEN" >> $GITHUB_ENV
      
      - name: Build and Push Docker Image
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t ${{ secrets.ECR_REGISTRY }}:lastest -f Dockerfile .
          docker push ${{ secrets.ECR_REGISTRY }}:lastest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 7. Copiar docker-compose-prod.yml a la instancia EC2
      - name: Copy docker-compose-prod.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose-prod.yml"
          target: "/home/ubuntu/"

      # 8. Desplegar contenedores en la instancia EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            docker-compose -f /home/ubuntu/docker-compose-prod.yml down --remove-orphans --volumes
            docker system prune --all --volumes -f
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}:latest
            docker-compose -f /home/ubuntu/docker-compose-prod.yml up -d
            CONTAINER_ID=$(docker ps -qf "ancestor=${{ secrets.ECR_REGISTRY }}:latest")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Container ID not found."
              exit 1
            fi
            docker exec $CONTAINER_ID bash -c "cat > .env <<EOF

            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=
            APP_DEBUG=false
            APP_URL=http://${{ env.EC2_PUBLIC_IP }}

            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=error

            DB_CONNECTION=mysql
            DB_HOST=laravel-db.c9ggq08s6bc2.us-east-2.rds.amazonaws.com
            DB_PORT=3306
            DB_DATABASE=laravel
            DB_USERNAME=admin
            DB_PASSWORD=secretpassword

            BROADCAST_DRIVER=log
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120

            REDIS_CLIENT=phpredis
            REDIS_HOST=127.0.0.1
            REDIS_PORT=6379
            REDIS_PASSWORD=null

            MAIL_MAILER=smtp
            MAIL_HOST=mailpit
            MAIL_PORT=1025
            MAIL_USERNAME=null
            MAIL_PASSWORD=null
            MAIL_ENCRYPTION=null
            MAIL_FROM_ADDRESS=\"hello@example.com\"
            MAIL_FROM_NAME=\"Laravel\"

            AWS_ACCESS_KEY_ID=
            AWS_SECRET_ACCESS_KEY=
            AWS_DEFAULT_REGION=us-east-1
            AWS_BUCKET=
            AWS_USE_PATH_STYLE_ENDPOINT=false

            PUSHER_APP_ID=
            PUSHER_APP_KEY=
            PUSHER_APP_SECRET=
            PUSHER_HOST=
            PUSHER_PORT=443
            PUSHER_SCHEME=https
            PUSHER_APP_CLUSTER=mt1

            VITE_APP_NAME="${APP_NAME}"
            VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
            VITE_PUSHER_HOST="${PUSHER_HOST}"
            VITE_PUSHER_PORT="${PUSHER_PORT}"
            VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
            VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

            EOF"
            docker exec $CONTAINER_ID chmod -R 755 storage
            docker exec $CONTAINER_ID chown -R www-data:www-data storage
            docker exec $CONTAINER_ID composer install
            docker exec $CONTAINER_ID php artisan key:generate
            docker exec $CONTAINER_ID php artisan migrate --force
            docker exec $CONTAINER_ID php artisan config:clear
            docker exec $CONTAINER_ID php artisan route:clear
            docker exec $CONTAINER_ID php artisan view:clear
            docker exec $CONTAINER_ID php artisan cache:clear
            docker exec $CONTAINER_ID npm install -d
            docker exec $CONTAINER_ID npm run build
