name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Verificar credenciales de AWS
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      # 4. Desplegar infraestructura con CloudFormation
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name laravel-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5. Obtener IP de EC2 y Endpoint de RDS
      - name: Get EC2 Public IP and RDS Endpoint
        id: cfn_outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='MyEC2InstancePublicIP'].OutputValue" --output text)
          RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name laravel-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 6. Generar token de autenticación para ECR
      - name: Generate ECR login token
        id: ecr_login
        run: |
          LOGIN_TOKEN=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
          echo "LOGIN_TOKEN=$LOGIN_TOKEN" >> $GITHUB_ENV

      # 7. Copiar docker-compose-prod.yml a la instancia EC2
      - name: Copy docker-compose-prod.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose-prod.yml"
          target: "/home/ubuntu/"

      # 8. Desplegar contenedores en la instancia EC2
      - name: Deploy to EC2 and Configure Laravel
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # 1. Detener y eliminar contenedores existentes
            echo "Deteniendo y eliminando contenedores existentes..."
            docker-compose -f /home/ubuntu/docker-compose-prod.yml down --remove-orphans --volumes

            # 2. Eliminar imágenes antiguas (opcional)
            echo "Eliminando imágenes antiguas..."
            docker image prune -f

            # 3. Autenticar Docker en ECR
            echo "Autenticando Docker en ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # 4. Descargar imágenes y ejecutar contenedores
            echo "Descargando imágenes y ejecutando contenedores..."
            docker pull ${{ secrets.ECR_REGISTRY }}:latest
            docker-compose -f /home/ubuntu/docker-compose-prod.yml up -d

            # 5. Entrar al contenedor Laravel
            echo "Entrando al contenedor Laravel..."
            CONTAINER_ID=$(docker ps -qf "ancestor=${{ secrets.ECR_REGISTRY }}/laravel-app:latest")
            docker exec -it $CONTAINER_ID bash <<EOF

            # 6. Dar permisos a los directorios necesarios
            echo "Asignando permisos a storage y bootstrap/cache..."
            chmod -R 775 storage bootstrap/cache

            # 7. Instalar dependencias de Composer
            echo "Instalando dependencias de Composer..."
            composer install --no-dev --optimize-autoloader

            # 8. Instalar dependencias de NPM
            echo "Instalando dependencias de NPM..."
            npm install
            npm run build

            # 9. Crear o actualizar el archivo .env
            echo "Creando archivo .env..."
            echo "APP_NAME=Laravel" > .env
            echo "APP_ENV=production" >> .env
            echo "APP_DEBUG=false" >> .env
            echo "APP_URL=http://${{ env.EC2_PUBLIC_IP }}" >> .env
            echo "LOG_CHANNEL=stack" >> .env
            echo "LOG_LEVEL=error" >> .env
            echo "DB_CONNECTION=mysql" >> .env
            echo "DB_HOST=${{ steps.cfn_outputs.outputs.RDSEndpoint }}" >> .env
            echo "DB_PORT=3306" >> .env
            echo "DB_DATABASE=laravel" >> .env
            echo "DB_USERNAME=admin" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            # 10. Generar la clave de aplicación
            echo "Generando clave de aplicación..."
            php artisan key:generate

            # 11. Ejecutar migraciones
            echo "Ejecutando migraciones..."
            php artisan migrate --force

            # 12. Limpiar caché y optimizar la aplicación
            echo "Limpiando caché y optimizando la aplicación..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            EOF
